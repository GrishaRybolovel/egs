from django.db import models
from django.conf import settings
import datetime
from django.contrib.auth.base_user import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin

# Create your models here.

from django.db.models import QuerySet
from django.db.models.signals import post_save

from egs.managers import UserManager
from django.dispatch import receiver
import requests
from egs.settings import BOT_URL
from bot.models import TelegramUsers


#Class for Employees
class Employees(AbstractBaseUser, PermissionsMixin):

    #Basic user info
    email = models.CharField(max_length=20, unique=True)
    name = models.CharField(max_length=63, verbose_name='–ò–º—è')
    surname = models.CharField(max_length=63, verbose_name='–§–∞–º–∏–ª–∏—è')
    last_name = models.CharField(max_length=63, blank=True, null=True, verbose_name='–û—Ç—á–µ—Å—Ç–≤–æ')

    #Some more specific data
    phone = models.CharField(max_length=255, blank=True, null=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    address = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ê–¥—Ä–µ—Å')
    date_of_birth = models.DateField(verbose_name='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', null=True)
    date_of_start = models.DateField(verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', blank=True, null=True)
    inn = models.CharField(max_length=256, blank=True, null=True, verbose_name='–ò–ù–ù')
    snils = models.CharField(max_length=256, blank=True, null=True, verbose_name='–°–ù–ò–õ–°')
    passport = models.TextField(max_length=256, blank=True, null=True, verbose_name='–ü–∞—Å–ø–æ—Ä—Ç')
    post = models.CharField(max_length=255, blank=True, null=True, verbose_name='–î–æ–ª–∂–Ω–æ—Å—Ç—å')
    info_about_relocate = models.TextField(max_length=511, blank=True, null=True, verbose_name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ')
    attestation = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è')
    qualification = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    retraining = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ü—Ä–æ—Ñ. –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞')
    status = models.BooleanField(verbose_name='–°—Ç–∞—Ç—É—Å', default=True)
    is_staff = models.BooleanField(verbose_name='–ê–¥–º–∏–Ω', default=False)
    is_active = models.BooleanField('active', default=True)
    # is_admin = models.BooleanField(default=False)
    ROLE_IN_SYSTEM_CHOICES = [
        ('DI', '–î–∏—Ä–µ–∫—Ç–æ—Ä'),
        ('ME', '–ú–µ–Ω–µ–¥–∂–µ—Ä/–ò–Ω–∂–µ–Ω–µ—Ä'),
        ('RA', '–†–∞–±–æ—Ç–Ω–∏–∫'),
        ('BU', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'),
        ('RN', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
        ('KS', '–ö–∞–¥—Ä–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
    ]
    role = models.CharField(max_length=3,
                            choices=ROLE_IN_SYSTEM_CHOICES,
                            default='RA',
                            verbose_name='–†–æ–ª—å',
                            blank=True)


    #Some company data
    COMPANY_CHOICES = [
        ('GP', '–ì–ê–ó–°–ü–ï–¶–ü–†–û–ï–ö–¢'),
        ('NG', '–ù–µ –ì–ê–ó–°–ü–ï–¶–ü–†–û–ï–ö–¢')
    ]
    company = models.CharField(max_length=3,
                               choices=COMPANY_CHOICES,
                               default='GP',
                               verbose_name='–ö–æ–º–ø–∞–Ω–∏—è',
                               blank=True)
    DIVISION_CHOICES = [
        ('GSP', '–ì–ê–ó–°–ü–ï–¶–ü–†–û–ï–ö–¢'),
        ('PTO', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª (–ü–¢–û)'),
        ('WGP', '–í–æ–¥–≥–∞–∑–ø—Ä–æ–µ–∫—Ç')
    ]
    division = models.ForeignKey(
        "Divisions",
        on_delete=models.deletion.PROTECT,
        related_name="employee_to_div",
        null=True,
        blank=True,
        verbose_name='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
    )
    leader = models.ForeignKey(
        "self",
        on_delete=models.deletion.CASCADE,
        null=True,
        blank=True,
        verbose_name='–ù–∞—á–∞–ª—å–Ω–∏–∫'
    )

    #Some many to many fields and functions
    employee_to_task = models.ManyToManyField(
        "Tasks",
        related_name="employees",
        blank=True,
        verbose_name='–ó–∞–¥–∞–Ω–∏—è'
    )
    employee_to_project = models.ManyToManyField(
        "Projects",
        related_name="projects",
        blank=True,
        verbose_name='–û–±—ä–µ–∫—Ç—ã'
    )

    employee_to_document = models.ManyToManyField(
        "Documents",
        related_name="employee_to_doc",
        blank=True,
        verbose_name='–î–æ–∫—É–º–µ–Ω—Ç—ã'
    )

    employee_to_mail = models.ManyToManyField(
        "Mails",
        related_name="employee_to_mail",
        blank=True,
        verbose_name='–ü–∏—Å—å–º–∞'
    )

    @property
    def mails(self) -> QuerySet['Mails']:
        return Mails.objects.filter(employees_to_mails__name=self.name)

    def get_role(self):

        if self.role == 'DI':
            return '–î–∏—Ä–µ–∫—Ç–æ—Ä'
        if self.role == 'ME':
            return '–ú–µ–Ω–µ–¥–∂–µ—Ä/–ò–Ω–∂–µ–Ω–µ—Ä'
        if self.role == 'RA':
            return '–†–∞–±–æ—Ç–Ω–∏–∫'
        if self.role == 'BU':
            return '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'
        if self.role == 'RN':
            return '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        if self.role == 'KS':
            return '–ö–∞–¥—Ä–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'

    objects = UserManager()

    EMAIL_FIELD = 'email'
    USERNAME_FIELD = 'email'

    def __str__(self):
        return str(self.surname + ' ' + self.name)

    class Meta:
        verbose_name = '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
        verbose_name_plural = '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'


@receiver(post_save, sender=Employees)
def call_emp(sender, instance, **kwargs):
    CompanyDocuments.objects.update_or_create(pk=1)



class Messages(models.Model):
    message = models.TextField(max_length=1024, verbose_name='–°–æ–æ–±—â–µ–Ω–∏–µ')
    author = models.ForeignKey(
        "Employees",
        on_delete=models.deletion.PROTECT,
        verbose_name='–ê–≤—Ç–æ—Ä'
    )
    task = models.ForeignKey(
        "Tasks",
        on_delete=models.deletion.PROTECT,
        related_name="messages",
        verbose_name='–ó–∞–¥–∞–Ω–∏–µ',
        null=True
    )
    mails_tag = models.ForeignKey(
        "Mails",
        on_delete=models.deletion.PROTECT,
        related_name="messages_to_mails",
        verbose_name='–ü–∏—Å—å–º–æ',
        null=True
    )

    time = models.DateTimeField(auto_now=True)

    doc = models.FileField(null=True, blank=True, upload_to='upload_messages', verbose_name='–î–æ–∫—É–º–µ–Ω—Ç')

    def __str__(self):
        return self.message

    def has_file(self):
        return bool(self.doc)

    class Meta:
        verbose_name = '–°–æ–æ–±—â–µ–Ω–∏—è'
        verbose_name_plural = '–°–æ–æ–±—â–µ–Ω–∏—è'


@receiver(post_save, sender=Messages)
def call_message(sender, instance, **kwargs):
    users = None
    my_object = None
    message_type = None
    try:
        users = instance.task.employees.all()
        my_object = instance.task
        message_type = '–û–ë–™–ï–ö–¢–£'
    except:
        users = instance.mails_tag.employees.all()
        my_object = instance.mails_tag
        message_type = '–ü–ò–°–¨–ú–£'

    print(users)
    print(my_object)
    for user in users:
        bot_user = None
        print(user)
        try:
            bot_user = TelegramUsers.objects.get(phone_number=user.phone)
        except:
            pass
        # print(bot_user.phone_number)
        if bot_user:
            chat_id = bot_user.chat_id

            message = f'*–¢–∏–ø*:   –°–û–û–ë–©–ï–ù–ò–ï –ü–û {message_type} *{my_object}*üîî\n\n*–û—Ç*: {instance.author}\n\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*üí¨:\n    {instance.message}'

            requests.post(BOT_URL + 'sendMessage', json={'chat_id': int(chat_id), 'text': message, 'parse_mode': 'Markdown'})



class Tasks(models.Model):
    name = models.CharField(max_length=1023, verbose_name='–ó–∞–¥–∞–Ω–∏–µ', blank=True)
    author = models.ForeignKey(
        "Employees",
        on_delete=models.deletion.CASCADE,
        verbose_name='–ê–≤—Ç–æ—Ä'
    )
    created = models.DateField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    completion = models.DateField(verbose_name='–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    done = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', null=True, blank=True)
    projects = models.ForeignKey(
        "Projects",
        on_delete=models.deletion.PROTECT,
        related_name="tasks",
        verbose_name='–ü—Ä–æ–µ–∫—Ç'
    )

    @property
    def messages(self) -> QuerySet[Messages]:
        return Messages.objects.filter(task__name=self.name).order_by('-author__date_of_birth')

    @property
    def employees(self) -> QuerySet[Employees]:
        return Employees.objects.filter(employee_to_task__name=self.name)

    @property
    def get_type(self):
        if self.done:
            return 0
        if self.projects.proj_type == 'EXP':
            if self.completion >= datetime.date.today():
                return 1
            else:
                return 2

        if self.projects.proj_type == 'TO':
            if self.completion >= datetime.date.today():
                return 3
            else:
                return 4

        if self.projects.proj_type == 'SMR':
            if self.completion >= datetime.date.today():
                return 5
            else:
                return 6

        if self.projects.proj_type == 'PRO':
            if self.completion >= datetime.date.today():
                return 7
            else:
                return 8

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ó–∞–¥–∞—á–∏'
        verbose_name_plural = '–ó–∞–¥–∞—á–∏'



class Mails(models.Model):
    name = models.CharField(max_length=1023, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    naming = models.CharField(max_length=1023, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è/–ø–æ–ª—É—á–∞—Ç–µ–ª—è')
    created = models.DateField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now=True)
    date_reg = models.DateField(verbose_name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    number = models.CharField(max_length=1023, verbose_name='–ù–æ–º–µ—Ä')
    author = models.ForeignKey(
        "Employees",
        on_delete=models.deletion.CASCADE,
        verbose_name='–ê–≤—Ç–æ—Ä'
    )
    completion = models.DateField(verbose_name='–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', null=True, blank=True)
    done = models.DateField(verbose_name='–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', null=True, blank=True)
    type = models.CharField(max_length=256, verbose_name='–¢–∏–ø')
    projects_to_mails = models.ForeignKey(
        "Projects",
        on_delete=models.deletion.CASCADE,
        related_name="projects_to_mails",
        null=True,
        blank=True,
        verbose_name="–û–±—ä–µ–∫—Ç"
    )

    @property
    def messages(self) -> QuerySet[Messages]:
        return Messages.objects.filter(mails_tag__name=self.name)

    @property
    def employees(self) -> QuerySet[Employees]:
        return Employees.objects.filter(employee_to_mail__name=self.name)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ü–∏—Å—å–º–∞'
        verbose_name_plural = '–ü–∏—Å—å–º–∞'



class Projects(models.Model):
    STATUS_CHOICES = [
        ('IWrk', '–í —Ä–∞–±–æ—Ç–µ'),
        ('PNR', '–ü–ù–†'),
        ('SOff', '–°–µ–∑–æ–Ω –æ—Ç–∫–ª.'),
        ('SMR', '–°–ú–†'),
        ('AOff', '–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª.')
    ]
    SEASONING_CHOICES = [
        ('Seas', '–°–µ–∑–æ–Ω–Ω–∞—è'),
        ('Fyea', '–ö—Ä—É–≥–ª–æ–≥–æ–¥–∏—á–Ω–∞—è')
    ]
    TYPE_CHOICES = [
        ('EXP', '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è'),
        ('TO', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'),
        ('SMR', '–°–ú–†'),
        ('PRO', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ')
    ]
    proj_type = models.CharField(
        max_length=3,
        choices=TYPE_CHOICES,
        default='EXP',
        verbose_name='–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞'
    )

    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    reg_num = models.CharField(max_length=255, verbose_name='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π ‚Ññ –û–ü–û')
    contract = models.CharField(max_length=255, blank=True, verbose_name='–î–æ–≥–æ–≤–æ—Ä')
    date_creation = models.DateField(verbose_name='–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞')
    date_notification = models.DateField(verbose_name='–î–∞—Ç–∞(–¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è)')
    object_type = models.CharField(max_length=255, blank=True, verbose_name='–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞')
    address = models.CharField(max_length=255, blank=True, verbose_name='–ê–¥—Ä–µ—Å')
    contact = models.CharField(max_length=255, blank=True, verbose_name='–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫')
    phone = models.CharField(max_length=255, blank=True, verbose_name='–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω')
    email = models.CharField(max_length=255, blank=True, verbose_name='–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π e-mail')
    status = models.CharField(
        max_length=4,
        choices=STATUS_CHOICES,
        default='IWrk',
        verbose_name='–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞'
    )
    seasoning = models.CharField(
        max_length=4,
        choices=SEASONING_CHOICES,
        default='Seas',
        verbose_name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'
    )
    cost = models.IntegerField(blank=True, null=True, verbose_name='–¶–µ–Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')

    project_to_document = models.ManyToManyField(
        "Documents",
        related_name="project_to_doc",
        blank=True,
        verbose_name='–î–æ–∫—É–º–µ–Ω—Ç—ã'
    )

    def __str__(self):
        return self.name

    #One to many Tasks
    #Many to many Employees
    @property
    def tasks(self) -> QuerySet[Tasks]:
        f = Tasks.objects.filter(projects__name=self.name)
        return f

    @property
    def employee(self) -> QuerySet[Tasks]:
        f = Employees.objects.filter(employee_to_project__name=self.name)
        return f

    @property
    def mail(self) -> QuerySet[Tasks]:
        f = Mails.objects.filter(projects_to_mails__name=self.name)
        return f

    class Meta:
        verbose_name = '–û–±—ä–µ–∫—Ç—ã'
        verbose_name_plural = '–û–±—ä–µ–∫—Ç—ã'


class Documents(models.Model):

    ROLE_IN_SYSTEM_CHOICES = [
        ('WO', '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'),
        ('CH', '–ß–µ—Ä–Ω–æ–≤–∏–∫'),
        ('NS', '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'),
        ('CU', '–î–µ–π—Å—Ç–≤—É—é—â–∏–π'),
        ('CO', '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π'),
        ('RA', '–†–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—ã–π'),
        ('AN', '–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π')
    ]
    TYPE_CHOICES = [
        ('01', '–î–æ–≥–æ–≤–æ—Ä'),
        ('02', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ'),
        ('03', '–ü—Ä–∞–≤–æ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'),
        ('04', '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'),
        ('05', '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞'),
        ('06', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'),
        ('07', '–†–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞–∫—Ç—ã –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é'),
        ('08', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É'),
        ('09', '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'),
        ('10', '–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞'),
        ('11', '–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–µ–∑–æ–Ω–Ω—ã–µ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'),
        ('12', '–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã–µ –∞–∫—Ç—ã'),
        ('13', '–ò–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã')
    ]

    name = models.CharField(max_length=255, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    status = models.CharField(max_length=4,
                              choices=ROLE_IN_SYSTEM_CHOICES,
                              default='CU',
                              verbose_name='–°—Ç–∞—Ç—É—Å')
    doc_type = models.CharField(max_length=100,
                                choices=TYPE_CHOICES,
                                default='01',
                                verbose_name='–¢–∏–ø')
    duration = models.DateField(verbose_name='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è')
    doc = models.FileField(upload_to='uploads/', verbose_name='–î–æ–∫—É–º–µ–Ω—Ç')

    def __str__(self):
        return self.name

    @property
    def employees(self) -> QuerySet['Employees']:
        return self.employee_to_doc.all()

    @property
    def projects(self) -> QuerySet['Projects']:
        return self.project_to_doc.all()

    class Meta:
        verbose_name = '–î–æ–∫—É–º–µ–Ω—Ç—ã'
        verbose_name_plural = '–î–æ–∫—É–º–µ–Ω—Ç—ã'


class Divisions(models.Model):
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è')
    parent_division = models.ForeignKey(
        "Divisions",
        on_delete=models.deletion.PROTECT,
        blank=True,
        null=True,
        related_name="parent_div",
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
    )

    @property
    def divis(self) -> QuerySet['Divisions']:
        return Divisions.objects.filter(parent_div__name=self.name)

    @property
    def del_check(self) -> QuerySet['Divisions']:
        return Divisions.objects.filter(parent_division=self)

    @property
    def employees(self) -> QuerySet['Employees']:
        return Employees.objects.filter(division__name=self.name)

    @property
    def employees_amount(self) -> QuerySet['Employees']:
        return Employees.objects.filter(division__name=self.name).count()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
        verbose_name_plural = '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'

class CompanyDocuments(models.Model):
    company_to_document = models.ManyToManyField(
        "Documents",
        related_name="company_to_doc",
        blank=True,
        verbose_name='–î–æ–∫—É–º–µ–Ω—Ç—ã'
    )

    class Meta:
        verbose_name = '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏'
        verbose_name_plural = '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏'


class Notification(models.Model):
    title = models.CharField(max_length=100)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)
    users_read = models.ManyToManyField(Employees, blank=True)

    def mark_as_read(self, user):
        self.users_read.add(user)

    def postpone(self, user):
        my_object = Postponed.objects.update_or_create(notification=self, user=user,
                                                       defaults={'postponed_at': datetime.datetime.now()})
        print(my_object)


class Postponed(models.Model):
    notification = models.ForeignKey(
        "Notification",
        on_delete=models.deletion.CASCADE,
        blank=True,
        null=True,
        related_name="notif",
        verbose_name='–û–ø–æ–≤–µ—â–µ–Ω–∏–µ'
    )
    user = models.ForeignKey(
        "Employees",
        on_delete=models.deletion.CASCADE,
        blank=True,
        null=True,
        related_name="postpone_user",
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    postponed_at = models.DateTimeField()


@receiver(post_save, sender=Notification)
def call_notification(sender, instance, **kwargs):
    users = Employees.objects.all()
    for user in users:
        bot_user = None
        try:
            bot_user = TelegramUsers.objects.get(phone_number=user.phone)
        except:
            pass
        if bot_user:
            chat_id = bot_user.chat_id

            message = f'*–¢–∏–ø*:   –£–í–ï–î–û–ú–õ–ï–ù–ò–ïüîî\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ*üìå:\n    {instance.title}\n\n*–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*üí¨:\n    {instance.message}'

            requests.post(BOT_URL + 'sendMessage', json={'chat_id': int(chat_id), 'text': message, 'parse_mode': 'Markdown'})
